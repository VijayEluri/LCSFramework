package gr.auth.ee.lcs;

import gr.auth.ee.lcs.classifiers.ClassifierSet;
import gr.auth.ee.lcs.data.UpdateAlgorithmFactoryAndStrategy;
import gr.auth.ee.lcs.geneticalgorithm.INaturalSelector;
import gr.auth.ee.lcs.geneticalgorithm.selectors.BestClassifierSelector;

public class LCSExploitTemplate {

	// TODO: Changes on ml
	public int classify(double[] dataInstance, ClassifierSet population) {
		INaturalSelector selector = new BestClassifierSelector(true,
				UpdateAlgorithmFactoryAndStrategy.COMPARISON_MODE_EXPLOITATION);

		// Generate MatchSet
		ClassifierSet matchSet = new ClassifierSet(null);
		final int populationSize = population.getNumberOfMacroclassifiers();
		for (int i = 0; i < populationSize; i++) {
			if (population.getClassifier(i).isMatch(dataInstance)) {
				matchSet.addClassifier(population.getMacroclassifier(i), false);
			}
		}

		if (matchSet.getTotalNumerosity() == 0)
			return -1;
		ClassifierSet results = new ClassifierSet(null);
		selector.select(1, matchSet, results);

		return results.getClassifier(0).getActionAdvocated();
	}

	public boolean classifyCorrectly(double[] dataInstance,
			ClassifierSet population) {
		INaturalSelector selector = new BestClassifierSelector(true,
				UpdateAlgorithmFactoryAndStrategy.COMPARISON_MODE_EXPLOITATION);

		// Generate MatchSet
		ClassifierSet matchSet = new ClassifierSet(null);
		final int populationSize = population.getNumberOfMacroclassifiers();
		for (int i = 0; i < populationSize; i++) {
			if (population.getClassifier(i).isMatch(dataInstance)) {
				matchSet.addClassifier(population.getMacroclassifier(i), false);
			}
		}

		if (matchSet.getTotalNumerosity() == 0)
			return false;
		ClassifierSet results = new ClassifierSet(null);
		selector.select(1, matchSet, results);

		return results.getClassifier(0).classifyCorrectly(dataInstance) == 1;
	}

}